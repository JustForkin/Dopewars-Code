dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/dopewars.c)

dnl Initialise automake
AM_INIT_AUTOMAKE(dopewars,cvs)

dnl Write configuration defines into config.h
AM_CONFIG_HEADER(config.h)

dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_MAKE_SET

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h stdlib.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_TIME
AC_STRUCT_TM

HAVE_FIXED_GTK="no"

dnl Process client options
AC_ARG_ENABLE(gui-client,
[  --enable-gui-client     include graphical client (GTK+/Win32)],
[ GUI_CLIENT="$enableval" ],[ GUI_CLIENT="yes" ])

AC_ARG_ENABLE(curses-client,
[  --enable-curses-client  include curses client],
[ CURSES_CLIENT="$enableval" ],[ CURSES_CLIENT="yes" ])

dnl Test for Cygwin environment
AC_CYGWIN
dnl Let the user override this with the --enable-nativewin32 option
AC_ARG_ENABLE(nativewin32,
[  --enable-nativewin32    build a native Win32 binary under Cygwin],
[ CYGWIN="$enableval" ])

if test "$CYGWIN" = "yes" ; then
   AC_MSG_RESULT("Configuring for native Win32 binary under Cygwin")
   AC_DEFINE(CYGWIN)

   dnl We NEED GLib, but glib-config is not usually installed under Cygwin
   dnl even when glib-1.3.dll is - so we assume GLib is in place; the worst
   dnl that can happen is that "make" fails later on.

   CFLAGS="$CFLAGS -mwindows -fnative-struct -mno-cygwin"
   LIBS="$LIBS -lwsock32 -lcomctl32 -lmpr"

   dnl Glib stuff
   LDFLAGS="$LDFLAGS -lglib-1.3"

   dnl We need to compile and then link in the Windows resources
   WNDRES="dopewars.res"
   AC_SUBST(WNDRES)

   dnl The gtkport implementation works just fine
   dnl for gtk_entry_set_visibility()
   HAVE_FIXED_GTK="yes"

   dnl Use graphical server by default
   GUI_SERVER="yes"
else
   AC_MSG_RESULT("Configuring for Unix binary")

   dnl We NEED glib - so test for it first
   AM_PATH_GLIB(1.2.0,,[AC_MSG_ERROR(Cannot find glib - aborting)])

   dnl On true Unix systems, test for valid curses-like libraries
   if test "$CURSES_CLIENT" = "yes" ; then
      AC_CHECK_LIB(ncurses,newterm)
      if test "$ac_cv_lib_ncurses_newterm" = "no" ; then
         AC_CHECK_LIB(curses,newterm)
         if test "$ac_cv_lib_curses_newterm" = "no" ; then
            AC_CHECK_LIB(cur_colr,newterm)
            if test "$ac_cv_lib_cur_colr_newterm" = "no" ; then
               AC_MSG_WARN(Cannot find any curses-type library)
               CURSES_CLIENT="no"
            fi
         fi
      fi
   fi

   if test "$GUI_CLIENT" = "yes" ; then
      dnl Tests for GTK
      AM_PATH_GTK(1.2.0,gtk_found="yes",gtk_found="no")
      if test "$gtk_found" = "no" ; then
         AC_MSG_WARN(Cannot find GTK+)
         GUI_CLIENT="no"
      else
         AC_MSG_CHECKING([for non-buggy GTK+ ( >= 1.2.10 )])
         dnl Versions older than 1.2.10 are buggy
         if test "$gtk_config_major_version" -gt 1 ; then
            HAVE_FIXED_GTK="yes"
         elif test "$gtk_config_major_version" -eq 1 ; then
            if test "$gtk_config_minor_version" -gt 2 ; then
               dnl We assume all 1.3.x releases are OK
               HAVE_FIXED_GTK="yes"
            elif test "$gtk_config_minor_version" -eq 2 -a \
                      "$gtk_config_micro_version" -ge 10 ; then
               HAVE_FIXED_GTK="yes"
            fi
         fi
         AC_MSG_RESULT("$HAVE_FIXED_GTK")
      fi
   fi

   dnl Glib stuff
   CFLAGS="$CFLAGS `glib-config --cflags`"
   LDFLAGS="$LDFLAGS `glib-config --libs`"

   dnl Use console server by default
   GUI_SERVER="no"

   dnl Some systems use int rather than socklen_t as an argument to getsockopt
   AC_MSG_CHECKING([for socklen_t data type])
   AC_TRY_COMPILE([#include <sys/types.h>
                   #include <sys/socket.h>],[socklen_t val],
                  [AC_MSG_RESULT([yes])
                   AC_DEFINE(HAVE_SOCKLEN_T)],
                  [AC_MSG_RESULT([no])])
fi

dnl Do i18n stuff
ALL_LINGUAS="de pl pt_BR fr"
AM_GNU_GETTEXT
if test "$gt_cv_func_gettext_libintl" = "yes"; then
    LIBS="-lintl  $LIBS"
fi

localedir=${datadir}/locale
AC_SUBST(localedir)

if test "$GUI_CLIENT" = "yes" ; then
   AC_DEFINE(GUI_CLIENT)
fi

if test "$CURSES_CLIENT" = "yes" ; then
   AC_DEFINE(CURSES_CLIENT)
fi

dnl Let the user override the server interface with the
dnl --enable-gui-server option
AC_ARG_ENABLE(gui-server,
[  --enable-gui-server     use a simple GTK+/Win32 GUI for the server],
[ GUI_SERVER="$enableval" ])

if test "$GUI_SERVER" = "yes" ; then
   AC_DEFINE(GUI_SERVER)
fi

if test "$HAVE_FIXED_GTK" = "yes" ; then
   AC_DEFINE(HAVE_FIXED_GTK)
fi

if test "$GUI_CLIENT" = "yes" -o "$GUI_SERVER" = "yes" ; then
   dnl Compile in the gtkport stuff for any kind of GUI
   GTKPORT_C="gtkport.c"
   GTKPORT_O="gtkport.o"
   AC_SUBST(GTKPORT_C)
   AC_SUBST(GTKPORT_O)
fi

dnl Can we use a long long datatype for price_t ?
AC_CHECK_SIZEOF(long long)

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_SETVBUF_REVERSED
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(strdup strstr getopt_long)

dnl Enable networking by default under Win32, but on Unix systems
dnl make it dependent on the availability of select and socket
network="no"
if test "$CYGWIN" = "yes" ; then
   network="yes"
else
   dnl Check for socket and select even if networking gets manually
   dnl disabled below, since select is used if available for
   dnl millisecond sleeping
   AC_SEARCH_LIBS(socket,socket)
   AC_SEARCH_LIBS(gethostbyname,nsl socket)
   AC_CHECK_FUNCS(socket gethostbyname select)
   if test "$ac_cv_func_select" = "yes" ; then
      if test "$ac_cv_func_socket" = "yes" ; then
         if test "$ac_cv_func_gethostbyname" = "yes" ; then
            network="yes"
         fi
      fi
   fi
fi

dnl Let the user override this with the --enable-networking option
AC_ARG_ENABLE(networking,
[  --enable-networking     dopewars will use TCP/IP to connect to servers],
[ network="$enableval" ])

dnl Inform the user of the status of networking
if test "$network" = "yes" ; then
   AC_DEFINE(NETWORKING)
fi

AC_ARG_ENABLE(strict,
[  --enable-strict         if using gcc, enable extra warnings above -Wall],
[ extrawarnings="$enableval" ])

dnl Enable full warnings if using gcc
if test -n "$GCC"; then
   if test "$extrawarnings" = "yes" ; then
      CFLAGS="$CFLAGS -Wall -Wpointer-arith -Wcast-qual -Wcast-align -Wsign-compare -Waggregate-return -Wredundant-decls -Wnested-externs -Wunused"
   else
      CFLAGS="$CFLAGS -Wall"
   fi
fi

dnl Pass the data directory to the compiler so the program knows
dnl where the high score file is
CFLAGS="$CFLAGS -DDATADIR=\\\"${datadir}\\\""

AC_OUTPUT([
Makefile
src/Makefile
doc/Makefile
intl/Makefile
po/Makefile.in],
[sed -e "/POTFILES =/r po/POTFILES" -e 's/^prefix = /prefix = ${DESTDIR}/' po/Makefile.in > po/Makefile])

echo
echo "dopewars has been configured as follows:"
echo
if test "$CYGWIN" = "yes" ; then
   echo "Building native Windows (Win32) version"
else
   echo "Building Unix version"
fi
echo
echo "CLIENTS"
if test "$CURSES_CLIENT" = "no" -a "$GUI_CLIENT" = "no" ; then
   echo " - No clients will be compiled (binary will be server/AI only)"
else
   if test "$CURSES_CLIENT" = "yes" ; then
      echo " - Text-mode (curses) client"
   fi
   if test "$GUI_CLIENT" = "yes" ; then
      echo " - Graphical (GTK+ or Win32) client"
   fi
fi

echo
if test "$network" = "yes" ; then
   echo "TCP/IP networking support enabled for multi-player games"
   echo
   echo "SERVER"
   if test "$GUI_SERVER" = "yes" ; then
      echo " - Graphical server"
   else
      echo " - Text-mode server"
   fi
else
   echo "Networking support DISABLED; single-player mode only"
fi

if test "$GUI_SERVER" = "yes" -o "$GUI_CLIENT" = "yes" ; then
   if test "$HAVE_FIXED_GTK" = "no" ; then
     cat <<FGTKEND

WARNING: You have an old version of GTK+, which has bugs in the
gtk_entry_set_visibility function (used for password-entry boxes). Thus, for
stability reasons, this function will not be used, and all passwords entered
will be visible. To fix this, upgrade GTK+ to version 1.2.10 or later.
FGTKEND
   fi
fi
echo
